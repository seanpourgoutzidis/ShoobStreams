{"ast":null,"code":"var _jsxFileName = \"/Users/seanpourgoutzidis/streams/client/src/components/streams/StreamShow.js\";\nimport React from 'react';\nimport { connect, Connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\nimport flv from 'flv.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      id\n    } = this.props.match.params;\n    this.props.fetchStream(id);\n    this.buildPlayer();\n  }\n\n  buildPlayer() {\n    if (this.player || !this.props.stream) {\n      return;\n    }\n\n    const {\n      id\n    } = this.props.match.params;\n    this.player = flv.createPlayer({\n      type: 'flv',\n      url: `http://localhost:8000/live/${id}.flv`\n    });\n    this.player.attachMediaElement(this.videoRef.current);\n    this.player.load();\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"LOADING...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 19\n      }, this);\n    }\n\n    const {\n      title,\n      description\n    } = this.props.stream;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: this.videoRef,\n        style: {\n          width: '100%'\n        },\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow);","map":{"version":3,"names":["React","connect","Connect","fetchStream","flv","StreamShow","Component","constructor","props","videoRef","createRef","componentDidMount","id","match","params","buildPlayer","player","stream","createPlayer","type","url","attachMediaElement","current","load","render","title","description","width","mapStateToProps","state","ownProps","streams"],"sources":["/Users/seanpourgoutzidis/streams/client/src/components/streams/StreamShow.js"],"sourcesContent":["import React from 'react';\nimport { connect, Connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\nimport flv from 'flv.js';\n\nclass StreamShow extends React.Component{\n   constructor(props) {\n       super(props);\n       this.videoRef= React.createRef();\n   }\n\n    componentDidMount() {\n\n       const { id } = this.props.match.params;\n        \n        this.props.fetchStream(id);\n        this.buildPlayer();\n    }\n\n    buildPlayer() {\n        if (this.player || !this.props.stream) {\n            return;\n        }\n\n        const { id } = this.props.match.params;\n\n        this.player = flv.createPlayer({\n            type: 'flv',\n            url: `http://localhost:8000/live/${id}.flv`\n         });\n \n         this.player.attachMediaElement(this.videoRef.current);\n         this.player.load();\n    }\n\n    render() {\n       if (!this.props.stream) {\n           return <div>LOADING...</div>;\n       }\n\n       const {title, description} = this.props.stream;\n\n        return (\n           <div>\n               <video ref = {this.videoRef} style = {{ width: '100%' }} controls = {true} />\n               <h1>{title}</h1>\n               <h5>{description}</h5>\n           </div>\n       );\n   }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return { stream: state.streams[ownProps.match.params.id] };\n};\n\nexport default connect(mapStateToProps, { fetchStream })(StreamShow);"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,aAAjC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,GAAP,MAAgB,QAAhB;;;AAEA,MAAMC,UAAN,SAAyBL,KAAK,CAACM,SAA/B,CAAwC;EACrCC,WAAW,CAACC,KAAD,EAAQ;IACf,MAAMA,KAAN;IACA,KAAKC,QAAL,gBAAeT,KAAK,CAACU,SAAN,EAAf;EACH;;EAEAC,iBAAiB,GAAG;IAEjB,MAAM;MAAEC;IAAF,IAAS,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAAhC;IAEC,KAAKN,KAAL,CAAWL,WAAX,CAAuBS,EAAvB;IACA,KAAKG,WAAL;EACH;;EAEDA,WAAW,GAAG;IACV,IAAI,KAAKC,MAAL,IAAe,CAAC,KAAKR,KAAL,CAAWS,MAA/B,EAAuC;MACnC;IACH;;IAED,MAAM;MAAEL;IAAF,IAAS,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAAhC;IAEA,KAAKE,MAAL,GAAcZ,GAAG,CAACc,YAAJ,CAAiB;MAC3BC,IAAI,EAAE,KADqB;MAE3BC,GAAG,EAAG,8BAA6BR,EAAG;IAFX,CAAjB,CAAd;IAKC,KAAKI,MAAL,CAAYK,kBAAZ,CAA+B,KAAKZ,QAAL,CAAca,OAA7C;IACA,KAAKN,MAAL,CAAYO,IAAZ;EACJ;;EAEDC,MAAM,GAAG;IACN,IAAI,CAAC,KAAKhB,KAAL,CAAWS,MAAhB,EAAwB;MACpB,oBAAO;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAP;IACH;;IAED,MAAM;MAACQ,KAAD;MAAQC;IAAR,IAAuB,KAAKlB,KAAL,CAAWS,MAAxC;IAEC,oBACG;MAAA,wBACI;QAAO,GAAG,EAAI,KAAKR,QAAnB;QAA6B,KAAK,EAAI;UAAEkB,KAAK,EAAE;QAAT,CAAtC;QAAyD,QAAQ,EAAI;MAArE;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAA,UAAKF;MAAL;QAAA;QAAA;QAAA;MAAA,QAFJ,eAGI;QAAA,UAAKC;MAAL;QAAA;QAAA;QAAA;MAAA,QAHJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADH;EAOJ;;AA5CoC;;AA+CxC,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;EACzC,OAAO;IAAEb,MAAM,EAAEY,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACjB,KAAT,CAAeC,MAAf,CAAsBF,EAApC;EAAV,CAAP;AACH,CAFD;;AAIA,eAAeX,OAAO,CAAC2B,eAAD,EAAkB;EAAEzB;AAAF,CAAlB,CAAP,CAA0CE,UAA1C,CAAf"},"metadata":{},"sourceType":"module"}