{"ast":null,"code":"var _jsxFileName = \"/Users/seanpourgoutzidis/streams/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { createStream } from '../../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StreamCreate extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.renderInput = _ref => {\n      let {\n        input,\n        label,\n        meta\n      } = _ref;\n      const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: className,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...input,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 17\n        }, this), this.renderError(meta)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.onSubmit = formValues => {\n      this.props.createStream(formValues);\n    };\n  }\n\n  renderError(_ref2) {\n    let {\n      error,\n      touched\n    } = _ref2;\n\n    if (touched && error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui error message\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ui button primary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\n;\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter a description';\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate);\nexport default connect(null, createStream)(formWrapped);","map":{"version":3,"names":["React","Field","reduxForm","connect","createStream","StreamCreate","Component","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","props","render","handleSubmit","validate","errors","title","description","formWrapped","form"],"sources":["/Users/seanpourgoutzidis/streams/client/src/components/streams/StreamCreate.js"],"sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { createStream } from '../../actions';\n\nclass StreamCreate extends React.Component {\n    \n    renderError({ error, touched }) {\n        if (touched && error) {\n            return (\n                <div className = \"ui error message\">\n                    <div className = \"header\">{error}</div>    \n                </div>\n            );\n        }\n    }\n    \n    renderInput = ({ input, label, meta }) => {\n        const className = `field ${meta.error && meta.touched ? 'error': ''}`;\n\n        return (\n            <div className = {className}>\n                <label>{label}</label>\n                <input {...input} autoComplete = \"off\" />\n                {this.renderError(meta)}\n            </div> \n        );\n    };\n\n    onSubmit = (formValues) => {\n        this.props.createStream(formValues);\n    }\n\n    render() {    \n        return (\n            <form onSubmit = {this.props.handleSubmit(this.onSubmit)} className = \"ui form error\">\n                <Field name = \"title\" component = {this.renderInput} label = \"Enter Title\" />\n                <Field name = \"description\" component = {this.renderInput} label = \"Enter Description\" />\n                <button className = \"ui button primary\">Submit</button>\n            </form>\n        );\n    }\n};\n\nconst validate = (formValues) => {\n    const errors = {};\n\n    if (!formValues.title) {\n        errors.title = 'You must enter a title';\n    }\n\n    if (!formValues.description) {\n        errors.description = 'You must enter a description';\n    }\n\n    return errors;\n};\n\nconst formWrapped = reduxForm({\n    form: 'streamCreate',\n    validate\n})(StreamCreate);\n\nexport default connect(null, createStream)(formWrapped);"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;;;AAEA,MAAMC,YAAN,SAA2BL,KAAK,CAACM,SAAjC,CAA2C;EAAA;IAAA;;IAAA,KAYvCC,WAZuC,GAYzB,QAA4B;MAAA,IAA3B;QAAEC,KAAF;QAASC,KAAT;QAAgBC;MAAhB,CAA2B;MACtC,MAAMC,SAAS,GAAI,SAAQD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,OAA7B,GAAsC,EAAG,EAApE;MAEA,oBACI;QAAK,SAAS,EAAIF,SAAlB;QAAA,wBACI;UAAA,UAAQF;QAAR;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI,sBAAWD,KAAX;UAAkB,YAAY,EAAG;QAAjC;UAAA;UAAA;UAAA;QAAA,QAFJ,EAGK,KAAKM,WAAL,CAAiBJ,IAAjB,CAHL;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ;IAOH,CAtBsC;;IAAA,KAwBvCK,QAxBuC,GAwB3BC,UAAD,IAAgB;MACvB,KAAKC,KAAL,CAAWb,YAAX,CAAwBY,UAAxB;IACH,CA1BsC;EAAA;;EAEvCF,WAAW,QAAqB;IAAA,IAApB;MAAEF,KAAF;MAASC;IAAT,CAAoB;;IAC5B,IAAIA,OAAO,IAAID,KAAf,EAAsB;MAClB,oBACI;QAAK,SAAS,EAAG,kBAAjB;QAAA,uBACI;UAAK,SAAS,EAAG,QAAjB;UAAA,UAA2BA;QAA3B;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QADJ;IAKH;EACJ;;EAkBDM,MAAM,GAAG;IACL,oBACI;MAAM,QAAQ,EAAI,KAAKD,KAAL,CAAWE,YAAX,CAAwB,KAAKJ,QAA7B,CAAlB;MAA0D,SAAS,EAAG,eAAtE;MAAA,wBACI,QAAC,KAAD;QAAO,IAAI,EAAG,OAAd;QAAsB,SAAS,EAAI,KAAKR,WAAxC;QAAqD,KAAK,EAAG;MAA7D;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI,QAAC,KAAD;QAAO,IAAI,EAAG,aAAd;QAA4B,SAAS,EAAI,KAAKA,WAA9C;QAA2D,KAAK,EAAG;MAAnE;QAAA;QAAA;QAAA;MAAA,QAFJ,eAGI;QAAQ,SAAS,EAAG,mBAApB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAHJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ;EAOH;;AApCsC;;AAqC1C;;AAED,MAAMa,QAAQ,GAAIJ,UAAD,IAAgB;EAC7B,MAAMK,MAAM,GAAG,EAAf;;EAEA,IAAI,CAACL,UAAU,CAACM,KAAhB,EAAuB;IACnBD,MAAM,CAACC,KAAP,GAAe,wBAAf;EACH;;EAED,IAAI,CAACN,UAAU,CAACO,WAAhB,EAA6B;IACzBF,MAAM,CAACE,WAAP,GAAqB,8BAArB;EACH;;EAED,OAAOF,MAAP;AACH,CAZD;;AAcA,MAAMG,WAAW,GAAGtB,SAAS,CAAC;EAC1BuB,IAAI,EAAE,cADoB;EAE1BL;AAF0B,CAAD,CAAT,CAGjBf,YAHiB,CAApB;AAKA,eAAeF,OAAO,CAAC,IAAD,EAAOC,YAAP,CAAP,CAA4BoB,WAA5B,CAAf"},"metadata":{},"sourceType":"module"}